{"componentChunkName":"component---src-templates-blog-post-js","path":"/nginx/","result":{"data":{"site":{"siteMetadata":{"title":"Herohi Blog"}},"allMarkdownRemark":{"nodes":[{"id":"866798b9-be06-5fc5-88a5-01594cfc3cfb","excerpt":"首先，创建两个模块供主文件导入，分别为 （使用 export 方式导出模块） 和 （使用 module.exports 方式导出模块）。 然后，在主文件中分四种情况来导入模块，来测试一下 Webpack 打包后的产物，他们分别为： 使用 import 导入 es…","fields":{"slug":"/webpack-bundle/"},"frontmatter":{"date":"June 06, 2022","title":"Webpack 打包产物分析","description":"CommonJs, ESModule, import/export, require, module.exports","order":45}},{"id":"6f38702c-1e71-5aa3-a09c-21a4483fdcb3","excerpt":"Decorator 是 ES7 的一个新语法，它可以用来装饰一个类、类中的某个方法、类中的某个属性或类中的某个方法的某个入参。装饰器本质上是一个函数，被装饰的对象（target）会以参数的形式传递给装饰器函数，在函数中可以对这个对象（target…","fields":{"slug":"/decorate/"},"frontmatter":{"date":"May 27, 2022","title":"Decorator 装饰器的用法、实现与应用","description":"decorator, typescript, Reflect, reflect-metadata","order":49}},{"id":"a966d658-d43c-555c-b81f-df239b1a9d19","excerpt":"Django 是一个由 Python 编写的一个开放源代码的 Web 应用框架。 使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC…","fields":{"slug":"/django/"},"frontmatter":{"date":"March 28, 2021","title":"Django 从开发到部署","description":"Django 项目搭建、部署。","order":50}},{"id":"acdadee8-d5bc-5b5c-86d0-fd5ea4d55062","excerpt":"上一篇 Django 从开发到部署 介绍了 Django 的基本操作。这篇将基于上一篇的代码，来扩展一个用户模块。 该模块基于 Django 自带的 auth 模块进行扩展，并实现了微信扫码登录的后端功能。 模块概览 其中： user/libs: 用户模块相关工具库。 user…","fields":{"slug":"/django-user/"},"frontmatter":{"date":"March 28, 2021","title":"Django -- 用户模块","description":"Django 用户模块搭建，基于JWT的登录登出系统、微信登录对接。","order":51}},{"id":"4b6e5d4a-e692-5564-8421-2ab8c362169c","excerpt":"NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. NGINX is known for its…","fields":{"slug":"/nginx/"},"frontmatter":{"date":"January 27, 2021","title":"Nginx","description":"Nginx 基本操作（安装、启动、升级...）。","order":null}}]},"markdownRemark":{"id":"4b6e5d4a-e692-5564-8421-2ab8c362169c","excerpt":"NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. NGINX is known for its high performance…","html":"<p>NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. NGINX is known for its high performance, stability, rich feature set, simple configuration, and low resource consumption.</p>\n<h3>编译 Nginx</h3>\n<ol>\n<li>在 <a href=\"http://nginx.org/en/download.html\">Nginx Download</a> 选择合适的版本，拷贝下载链接并进行安装：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> http://nginx.org/download/nginx-1.18.0.tar.gz\n<span class=\"token function\">tar</span> -xzf nginx-1.18.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> nginx-1.18.0\n<span class=\"token function\">cp</span> -r contrib/vim/* ~/.vim/</code></pre></div>\n<ol start=\"2\">\n<li>配置</li>\n</ol>\n<p>configure 是一些编译配置项，可以使用 <code class=\"language-text\">help</code> 命令查看有哪些配置选项。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./configure --help ｜ <span class=\"token function\">more</span></code></pre></div>\n<p>configure 配置项大概分为三类：</p>\n<ul>\n<li><code class=\"language-text\">--with-xxx-module</code> 表示原本没有的模块，需要主动添加到 nginx 中</li>\n<li><code class=\"language-text\">--without-xxx-module</code> 表示原本已有这个模块，需要移除</li>\n<li><code class=\"language-text\">--prefix</code>, <code class=\"language-text\">--with-cc</code> 等其他配置项</li>\n</ul>\n<p>编译前的检查和配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 编译 nginx 需要的前置依赖</span>\nyum -y <span class=\"token function\">install</span> gcc gcc-c++\nyum -y <span class=\"token function\">install</span> <span class=\"token function\">make</span>\nyum -y <span class=\"token function\">install</span> pcre-devel\nyum -y <span class=\"token function\">install</span> zlib-devel\n\n./configure --prefix<span class=\"token operator\">=</span>/home/nginx</code></pre></div>\n<p>完成配置之后，若没有报错，会生成 <code class=\"language-text\">objs</code> 中间文件夹。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> objs\n<span class=\"token function\">cat</span> ngx_modules.c <span class=\"token comment\"># 查看接下来编译时，有哪些模块会被编译进 nginx</span></code></pre></div>\n<ol start=\"3\">\n<li>开始编译</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<h3>开启 Nginx</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> /home/nginx/sbin\n./nginx</code></pre></div>\n<p>此时，Nginx 已经被成功开启，可以通过以下命令查看 Nginx 进程。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> nginx</code></pre></div>\n<h3>重载 Nginx</h3>\n<p>修改配置文件内容。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> path/to/nginx\n<span class=\"token function\">vim</span> conf/nginx.conf</code></pre></div>\n<p>重载。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./sbin/nginx -s reload</code></pre></div>\n<h3>升级 Nginx</h3>\n<p>把新编译出来的 nginx 二进制文件（sbin/nginx）替换调旧的进程正在使用的 nginx 二进制文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">mv</span> /path/to/new/nginx ./.sbin/nginx</code></pre></div>\n<p>停用当前进程并启用新进程（平滑地升级）。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">kill</span> -USR2 <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> path/to/nginx/logs/nginx.pid<span class=\"token variable\">`</span></span>\n<span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> nginx</code></pre></div>\n<p>此时，可以看到新老 nginx 进程都在运行，但老 nginx 的 worker 进程已经不再监听 80 端口了。</p>\n<p>优雅地关闭老进程。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">kill</span> -WINCH <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> path/to/nginx/logs/nginx.pid.oldbin<span class=\"token variable\">`</span></span>\n<span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> nginx</code></pre></div>\n<p>此时，老的 worker 进程被关闭了，但 master 进程还在，为了方便做版本回退。</p>\n<blockquote>\n<p>如果使用 <code class=\"language-text\">kill -QUIT</code> 就可以把 master 进程关闭。</p>\n</blockquote>\n<h3>日志切割</h3>\n<p>通过重启 nginx 形成新日志来实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> path/to/nginx/logs\n<span class=\"token function\">mv</span> access.log access-bak.log\n<span class=\"token punctuation\">..</span>/sbin/nginx -s reopen</code></pre></div>\n<p>这三行命令可以使用 <code class=\"language-text\">crontab</code> 定时执行脚本来实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token assign-left variable\">NGINX_PATH</span><span class=\"token operator\">=</span>/home/nginx\n<span class=\"token assign-left variable\">LOGS_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\">${NGINX_PATH}</span>/logs\n<span class=\"token assign-left variable\">HISTORY_LOGS_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\">${NGINX_PATH}</span>/logs/history\n<span class=\"token assign-left variable\">PID_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\">${LOGS_PATH}</span>/nginx.pid\n<span class=\"token assign-left variable\">YESTERDAY</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> -d <span class=\"token string\">\"yesterday\"</span> +%Y-%m-%d<span class=\"token variable\">)</span></span>\n<span class=\"token function\">mv</span> <span class=\"token variable\">${LOGS_PATH}</span>/access.log <span class=\"token variable\">${HISTORY_LOGS_PATH}</span>/access_<span class=\"token variable\">${YESTERDAY}</span>.log\n<span class=\"token function\">mv</span> <span class=\"token variable\">${LOGS_PATH}</span>/error.log <span class=\"token variable\">${HISTORY_LOGS_PATH}</span>/error_<span class=\"token variable\">${YESTERDAY}</span>.log\n<span class=\"token function\">kill</span> -USR1 <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> $<span class=\"token punctuation\">{</span>PID_PATH<span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span></code></pre></div>\n<p>将以上脚本写入 path/to/nginx/shell 中。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">crontab</span> -e\n// 写入\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> * * root /home/nginx/shell/rotate-logs.sh\n// 重启服务\n/sbin/service crond reload</code></pre></div>","frontmatter":{"title":"Nginx","date":"January 27, 2021","description":"Nginx 基本操作（安装、启动、升级...）。"}}},"pageContext":{"id":"4b6e5d4a-e692-5564-8421-2ab8c362169c","previousPostId":null,"nextPostId":"acdadee8-d5bc-5b5c-86d0-fd5ea4d55062"}},"staticQueryHashes":["2755755109","2841359383"]}