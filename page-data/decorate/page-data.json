{"componentChunkName":"component---src-templates-blog-post-js","path":"/decorate/","result":{"data":{"site":{"siteMetadata":{"title":"Herohi Blog"}},"allMarkdownRemark":{"nodes":[{"id":"866798b9-be06-5fc5-88a5-01594cfc3cfb","excerpt":"首先，创建两个模块供主文件导入，分别为 （使用 export 方式导出模块） 和 （使用 module.exports 方式导出模块）。 然后，在主文件中分四种情况来导入模块，来测试一下 Webpack 打包后的产物，他们分别为： 使用 import 导入 es…","fields":{"slug":"/webpack-bundle/"},"frontmatter":{"date":"June 06, 2022","title":"Webpack 打包产物分析","description":"CommonJs, ESModule, import/export, require, module.exports","order":45}},{"id":"6f38702c-1e71-5aa3-a09c-21a4483fdcb3","excerpt":"Decorator 是 ES7 的一个新语法，它可以用来装饰一个类、类中的某个方法、类中的某个属性或类中的某个方法的某个入参。装饰器本质上是一个函数，被装饰的对象（target）会以参数的形式传递给装饰器函数，在函数中可以对这个对象（target…","fields":{"slug":"/decorate/"},"frontmatter":{"date":"May 27, 2022","title":"Decorator 装饰器的用法、实现与应用","description":"decorator, typescript, Reflect, reflect-metadata","order":49}},{"id":"a966d658-d43c-555c-b81f-df239b1a9d19","excerpt":"Django 是一个由 Python 编写的一个开放源代码的 Web 应用框架。 使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC…","fields":{"slug":"/django/"},"frontmatter":{"date":"March 28, 2021","title":"Django 从开发到部署","description":"Django 项目搭建、部署。","order":50}},{"id":"acdadee8-d5bc-5b5c-86d0-fd5ea4d55062","excerpt":"上一篇 Django 从开发到部署 介绍了 Django 的基本操作。这篇将基于上一篇的代码，来扩展一个用户模块。 该模块基于 Django 自带的 auth 模块进行扩展，并实现了微信扫码登录的后端功能。 模块概览 其中： user/libs: 用户模块相关工具库。 user…","fields":{"slug":"/django-user/"},"frontmatter":{"date":"March 28, 2021","title":"Django -- 用户模块","description":"Django 用户模块搭建，基于JWT的登录登出系统、微信登录对接。","order":51}},{"id":"4b6e5d4a-e692-5564-8421-2ab8c362169c","excerpt":"NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. NGINX is known for its…","fields":{"slug":"/nginx/"},"frontmatter":{"date":"January 27, 2021","title":"Nginx","description":"Nginx 基本操作（安装、启动、升级...）。","order":null}}]},"markdownRemark":{"id":"6f38702c-1e71-5aa3-a09c-21a4483fdcb3","excerpt":"Decorator 是 ES7 的一个新语法，它可以用来装饰一个类、类中的某个方法、类中的某个属性或类中的某个方法的某个入参。装饰器本质上是一个函数，被装饰的对象（target）会以参数的形式传递给装饰器函数，在函数中可以对这个对象（target）进行操作，达到修改或者记录等目的。 一、开始调试 由于装饰器是 ES…","html":"<p>Decorator 是 ES7 的一个新语法，它可以用来装饰一个类、类中的某个方法、类中的某个属性或类中的某个方法的某个入参。装饰器本质上是一个函数，被装饰的对象（target）会以参数的形式传递给装饰器函数，在函数中可以对这个对象（target）进行操作，达到修改或者记录等目的。</p>\n<h2>一、开始调试</h2>\n<p>由于装饰器是 ES7 的语法，js 中需要借助 babel 插件进行语法转换，而 ts 只需要对 tsconfig.json 文件进行配置就可以使用了，故这边选用 ts 进行调试。</p>\n<p><strong>tsconfig.json</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"emitDecoratorMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2017\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"incremental\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"skipLibCheck\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictBindCallApply\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>二、装饰器基本用法</h2>\n<h3>1. 装饰一个类</h3>\n<p>装饰一个类的时候入参有且只能有一个 target，表示这个类，多传或少传参数 ts 都会提示错误。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">dec</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dec</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token comment\">// A</span>\n\n    <span class=\"token keyword\">return</span> Object <span class=\"token comment\">// 支持返回一个新的类取代原来的A</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Object</span></code></pre></div>\n<h3>2. 装饰类中的一个方法</h3>\n<p>装饰一个类中的方法时，target 是这个类的原型对象，name 是被装饰的方法名</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">dec</span></span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dec</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [class B]</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true b</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. 装饰类中的一个属性</h3>\n<p>装饰一个类中的属性时，target 是这个类的原型对象，name 是被装饰的属性名</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">dec</span></span>\n    c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dec</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true c</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>4. 装饰类中的某个方法的某个参数</h3>\n<p>其中，desc 为参数的坐标，比如这边是第二个参数，就是 1</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>params1<span class=\"token punctuation\">,</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">dec</span></span> params2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dec</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true d 1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>三、装饰器实现</h2>\n<h3>1. 先看看 __decorate 方法</h3>\n<p>使用 <code class=\"language-text\">tsc</code> 命令对源码进行编译，可以看到输出的代码中定义了一个 decorate 方法。</p>\n<p>下面是我经过优化后的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">__decorate</span><span class=\"token punctuation\">(</span>decorators<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span>\n        len <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>\n            <span class=\"token operator\">?</span> target\n            <span class=\"token operator\">:</span> desc <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n            <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>desc <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">:</span> desc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> decorators<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> decorator <span class=\"token operator\">=</span> decorators<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        res <span class=\"token operator\">=</span>\n            <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>\n                <span class=\"token operator\">?</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> len <span class=\"token operator\">></span> <span class=\"token number\">3</span>\n                <span class=\"token operator\">?</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中</p>\n<p><strong>len：</strong>表示传入的参数个数。若 len = 2 可以判断为该装饰器为类装饰器，若 len = 4 可以判断为该装饰器为其他类型装饰器。</p>\n<p><strong>res：</strong>新值，用来替换老值，可以被装饰器的返回值改变。不同类型的装饰器最终要替换的东西也不一样：</p>\n<ul>\n<li>类装饰器，res 用来替换原来那个类</li>\n<li>方法装饰器，res 用来替换该方法的描述对象（该方法挂在类的prototype上）</li>\n<li>属性装饰器，res初始为undefined（因为它是一个类的成员变量，只有当类实例化后才会出现），但如果装饰器返回了一个新的对象，则最终也会给原型上的名为 <code class=\"language-text\">[key]</code> 的属性定义一个描述对象</li>\n<li>如果是参数装饰器，res 用来替换该方法的描述对象（同方法装饰器）</li>\n</ul>\n<h3>2. 几种装饰器的代码补全</h3>\n<p>看明白了decorate方法，再补全几种装饰器的完整代码就比较容易理解了。</p>\n<p><strong>1. 类装饰器</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token function\">__decorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    decA\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">decA</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>2. 方法装饰器</strong></p>\n<p>先忽略 <code class=\"language-text\">__metadata</code>，后面看 reflect-metadata 的时候会看到。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">__decorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    decB<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"design:type\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"design:paramtypes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"design:returntype\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">decB</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>3. 属性装饰器</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">__decorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    decC<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"design:type\"</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">decC</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>4. 参数装饰器</strong></p>\n<p>通过 <code class=\"language-text\">__param</code> 方法可以看出，参数装饰器比方法装饰器多接收了一个 <code class=\"language-text\">paramIndex</code> 参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">var</span> __param <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__param<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>paramIndex<span class=\"token punctuation\">,</span> decorator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> paramIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>params1<span class=\"token punctuation\">,</span> params2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">__decorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">__param</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"design:type\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"design:paramtypes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Object<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"design:returntype\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dec</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>四、Reflect 和 reflect-metadata</h2>\n<p>Reflect 是一个内置对象，上面挂载了13个静态方法，他的设计的目的有以下几点：</p>\n<ol>\n<li>将 Object 对象上一些明显属于语言内部的方法，比如 Object.defineProperty 放到 Reflect 上</li>\n<li>修改某些 Object 方法的返回结果，使他们变得更合理</li>\n<li>让 Object 操作都变成函数行为。比如，它会将 in, delete 操作符，将他们替换成 Reflect.has 和 Reflect.deleteProperty</li>\n<li>Reflect 方法与 Proxy 对象的方法一一对应，就算 Proxy 的默认行为被修改了，也可以从 Reflect 上获取到默认行为</li>\n</ol>\n<h3>reflect-metadata</h3>\n<p>reflect-metadata 不仅实现了 Reflect 的 polyfill，还额外提供了 Reflect.metadata, Reflect.defineMetadata 和 Reflect.getMetadata。</p>\n<h5>1. 使用</h5>\n<p>默认的元数据装饰器可以被用于类, 类成员以及参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Reflect</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'className'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Reflect</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'propName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Reflect</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'funcName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'getName'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'className'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'propName'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'propName'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'funcName'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'getName'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// getName</span></code></pre></div>\n<p><code class=\"language-text\">defineMetadata</code> 该方法是 <code class=\"language-text\">metadata</code> 的定义版本, 也就是非@版本, 会多传一个参数 target, 表示待装饰的对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'className'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NewA'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'className'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NewA</span></code></pre></div>\n<h5>2. 原理</h5>\n<p>首先要明确我们的修饰器修饰的是哪个 target，如果是类修饰器，target 就是被修饰的类，如果是其他修饰器，那么 target 就是修饰器所在类的原型对象。</p>\n<p>其次，targetKey 在类修饰器中没有，在属性修饰器中为被修饰的属性名，方法/参数修饰器中，为被修饰的方法名。</p>\n<p>如果系统内部已经实现了，则会在 target 上增加一个隐藏属性 <code class=\"language-text\">[[metadata]]</code> ，而 reflect-metadata 中是通过 WeakMap 来实现的一个 polyfill。</p>\n<h2>四、装饰器应用</h2>","frontmatter":{"title":"Decorator 装饰器的用法、实现与应用","date":"May 27, 2022","description":"decorator, typescript, Reflect, reflect-metadata"}}},"pageContext":{"id":"6f38702c-1e71-5aa3-a09c-21a4483fdcb3","previousPostId":"a966d658-d43c-555c-b81f-df239b1a9d19","nextPostId":"866798b9-be06-5fc5-88a5-01594cfc3cfb"}},"staticQueryHashes":["2755755109","2841359383"]}